{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Projects\\\\Github\\\\cloud-developer-dev\\\\cloud-developer\\\\course-04\\\\exercises\\\\lesson-2\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Projects\\\\Github\\\\cloud-developer-dev\\\\cloud-developer\\\\course-04\\\\exercises\\\\lesson-2\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { apiEndpoint } from '../config';\nexport function getGroups() {\n  return _getGroups.apply(this, arguments);\n}\n\nfunction _getGroups() {\n  _getGroups = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Fetching groups');\n            _context.next = 3;\n            return fetch(\"\".concat(apiEndpoint, \"/groups\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result.items);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getGroups.apply(this, arguments);\n}\n\nexport function createGroup(_x) {\n  return _createGroup.apply(this, arguments);\n}\n\nfunction _createGroup() {\n  _createGroup = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(newGroup) {\n    var reply, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"\".concat(apiEndpoint, \"/groups\"), {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: newGroup.name,\n                description: newGroup.description\n              })\n            });\n\n          case 2:\n            reply = _context2.sent;\n            _context2.next = 5;\n            return reply.json();\n\n          case 5:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result.newItem);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createGroup.apply(this, arguments);\n}","map":{"version":3,"sources":["D:\\Projects\\Github\\cloud-developer-dev\\cloud-developer\\course-04\\exercises\\lesson-2\\client\\src\\api\\groups-api.ts"],"names":["apiEndpoint","getGroups","console","log","fetch","response","json","result","items","createGroup","newGroup","method","headers","body","JSON","stringify","name","description","reply","newItem"],"mappings":";;AACA,SAASA,WAAT,QAA4B,WAA5B;AAGA,gBAAsBC,SAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AADK;AAAA,mBAGkBC,KAAK,WAAIJ,WAAJ,aAHvB;;AAAA;AAGCK,YAAAA,QAHD;AAAA;AAAA,mBAIgBA,QAAQ,CAACC,IAAT,EAJhB;;AAAA;AAICC,YAAAA,MAJD;AAAA,6CAMEA,MAAM,CAACC,KANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBC,WAAtB;AAAA;AAAA;;;;;2BAAO,kBAA2BC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEeN,KAAK,WAAIJ,WAAJ,cAA0B;AACjDW,cAAAA,MAAM,EAAE,MADyC;AAEjDC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFwC;AAKjDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,IAAI,EAAEN,QAAQ,CAACM,IADI;AAEnBC,gBAAAA,WAAW,EAAEP,QAAQ,CAACO;AAFH,eAAf;AAL2C,aAA1B,CAFpB;;AAAA;AAECC,YAAAA,KAFD;AAAA;AAAA,mBAYgBA,KAAK,CAACZ,IAAN,EAZhB;;AAAA;AAYCC,YAAAA,MAZD;AAAA,8CAaEA,MAAM,CAACY,OAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { GroupModel } from '../types/GroupModel'\r\nimport { apiEndpoint } from '../config'\r\nimport { GroupUploadInfo } from '../types/GroupUploadInfo'\r\n\r\nexport async function getGroups(): Promise<GroupModel[]> {\r\n  console.log('Fetching groups')\r\n\r\n  const response = await fetch(`${apiEndpoint}/groups`)\r\n  const result = await response.json()\r\n\r\n  return result.items\r\n}\r\n\r\nexport async function createGroup(newGroup: GroupUploadInfo): Promise<GroupModel> {\r\n\r\n  const reply = await fetch(`${apiEndpoint}/groups`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      name: newGroup.name,\r\n      description: newGroup.description\r\n    })\r\n  })\r\n  const result = await reply.json();\r\n  return result.newItem\r\n}\r\n"]},"metadata":{},"sourceType":"module"}